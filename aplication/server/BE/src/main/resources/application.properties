spring.jpa.hibernate.ddl-auto=update

#Kh�ng c?n t?o database ?� t?o s?n
spring.datasource.url=jdbc:mysql://localhost:3306/movietheater_v2?createDatabaseIfNotExist=true
#Nh? ??i username v� password theo m�y
spring.datasource.username=root
spring.datasource.password=Ssy123456789
#spring.banner.charset=UTF-8
#AnhLT
# Hibernate props
spring.jpa.show-sql=false
#spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect
# Social login provider props
spring.security.oauth2.client.registration.google.clientId=727576182683-58so8gnimu8oe15q9cvor4dsr28v553t.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.clientSecret=2QdjuBvFo7PL4JTGPCf5C8ei
#spring.security.oauth2.client.registration.facebook.clientId=4323753824411685
#spring.security.oauth2.client.registration.facebook.clientSecret=5616107a8c286267b0fc498e217b96b5
#spring.security.oauth2.client.provider.facebook.user-info-uri=https://graph.facebook.com/me?fields=id,name,email,picture

app.auth.tokenSecret=926D96C90030DD58429D2751AC1BDBBC
app.auth.tokenExpirationMsec=864000000
# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the frontend client in the /oauth2/authorization request.
# We're not using cookies because they won't work well in mobile clients.
app.oauth2.authorizedRedirectUris=http://localhost:4200/oauth2/redirect,myandroidapp://oauth2/redirect,myiosapp://oauth2/redirect
# For detailed logging during development
#logging.level.com=TRACE
#logging.level.org.springframework=TRACE
server.port=8080



#server.port=8081
#spring.mail.host=smtp.googlemail.com
#spring.mail.username=anht19102000@gmail.com
#spring.mail.password=0974990621
#spring.mail.port=587
#spring.mail.properties.mail.smtp.starttls.enable=true
#spring.mail.properties.mail.smtp.auth=true
#spring.mail.properties.mail.smtp.starttls.required=true

